<div class="row">
    <div id="app" class="col-md-12">
        <h1 class="text-center"><?php echo $this->translate('Process Monitor') ?></h1>
        <process-monitor></process-monitor>
    </div>
</div>

<?php
//Bootstrap ember app
$this->inlineScript()->captureStart();

$process = $this->process;

if (! empty($process['started_at'])) {
    $process['started_at'] = $this->dateFormat(
        \DateTime::createFromFormat(\DateTime::ISO8601, $process['started_at']),
        IntlDateFormatter::MEDIUM, // date
        IntlDateFormatter::MEDIUM, // time
        $this->plugin('translate')->getTranslator()->getLocale()
    );
}

if (! empty($process['finished_at'])) {
    $process['finished_at'] = $this->dateFormat(
        \DateTime::createFromFormat(\DateTime::ISO8601, $process['finished_at']),
        IntlDateFormatter::MEDIUM, // date
        IntlDateFormatter::MEDIUM, // time
        $this->plugin('translate')->getTranslator()->getLocale()
    );
}

foreach ($process['tasks'] as &$task) foreach ($task['events'] as &$event) {
    if (! empty($event['occurred_on'])) {
        $event['occurred_on'] = $this->dateFormat(
            \DateTime::createFromFormat(\DateTime::ISO8601, $event['occurred_on']),
            IntlDateFormatter::MEDIUM, // date
            IntlDateFormatter::MEDIUM, // time
            $this->plugin('translate')->getTranslator()->getLocale()
        );
    }
}

$process = json_encode($process);

$availableProcessingTypes = json_encode($this->available_processing_types);
$availableTaskTypes = json_encode($this->available_task_types);
$availableManipulationScripts = json_encode($this->available_manipulation_scripts);
$connectors = json_encode($this->connectors);
$locations  = json_encode($this->locations);


$clientTranslations = json_encode([
    'process' => [
        'linear' => [
            'value' => \Prooph\Processing\Processor\Definition::PROCESS_LINEAR_MESSAGING,
            'label' => $this->translate('Linear Process'),
        ],
        'foreach' => [
            'value' => \Prooph\Processing\Processor\Definition::PROCESS_PARALLEL_FOR_EACH,
            'label' => $this->translate('Foreach Process'),
        ]
    ],
    'message' => [
        'collect_data' => [
            'value' => 'collect-data',
            'label' => $this->translate('Collect Data Message'),
        ],
        'data_collected' => [
            'value' => 'data-collected',
            'label' => $this->translate('Data Collected Message'),
        ],
        'process_data' => [
            'value' => 'process-data',
            'label' => $this->translate('Process Data Message'),
        ]
    ],
    'task' => [
        'task' => $this->translate('Task'),
        'new' => $this->translate('New Task'),
        'collect_data' => [
            'value' => \Prooph\Processing\Processor\Definition::TASK_COLLECT_DATA,
            'label' => $this->translate('Collect Data'),
        ],
        'process_data' => [
            'value' => \Prooph\Processing\Processor\Definition::TASK_PROCESS_DATA,
            'label' => $this->translate('Process Data'),
        ],
        'manipulate_payload' => [
            'value' => \Prooph\Processing\Processor\Definition::TASK_MANIPULATE_PAYLOAD,
            'label' => $this->translate('Run Manipulation Script'),
        ]
    ],
    'event' => [

        'log_message' => [
            'system_error' => $this->translate('A system error occurred!'),
            'unknown' => $this->translate('Unknown log message received with msg code: '),
        ]
    ],
    'metadata_not_available' => $this->translate('Metadata configuration is not available for the selected connector')
]);

echo <<<JS
window.PM = Prooph.Link.App.create({
    taskTypes : $availableTaskTypes,
    manipulationScripts : $availableManipulationScripts,
    processingTypes : $availableProcessingTypes,
    connectors : $connectors,
    locations : $locations,
    process : $process
});

$(function () {
    PM.bootstrap("process-monitor").ready();
});
JS;
$this->inlineScript()->captureEnd();
$this->inlineScript()->appendFile($this->basePath() . '/js/prooph/link/process-monitor/app.js');
?>
